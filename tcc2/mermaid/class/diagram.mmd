classDiagram
    class ByteString {
        +hex_str() const string
        +bits() const size_t
        +size() const size_t
        +resize(const size_t newSize) void
        +serialise() const virtual ByteString
        +chainDeserialise(ByteString& serialised) static ByteString
        -byteString vector<unsigned char>
    }
    
    class Serialisable {
        <<abstract>>
        +serialise() const virtual ByteString
        +~Serialisable() virtual
    }

    class PrivateKey {
        <<abstract>>
        +isOfType(const char* inType) const virtual bool
        +getBitLength() const virtual unsigned long
        +getOutputLength() const virtual unsigned long
	    +PKCS8Encode() ByteString
	    +PKCS8Decode(const ByteString& ber) bool;
    }
    Serialisable <|-- PrivateKey


    class PublicKey {
        <<abstract>>
        +isOfType(const char* inType) const virtual bool
        +getBitLength() const virtual unsigned long
        +getOutputLength() const virtual unsigned long
    }
    Serialisable <|-- PublicKey

    class EDPrivateKey {
        +type: const char*
        +getOrderLength() const virtual unsigned long
        +setK(const ByteString& inK) virtual void
        +setEC(const ByteString& inEC) virtual void
        +getK() const virtual const ByteString&
        +getEC() const virtual const ByteString&
        +deserialise(ByteString& serialised) virtual bool
        #k ByteString
        #ec ByteString
    }
    PrivateKey <|-- EDPrivateKey

    class EDPublicKey {
        +type: const char*
        +getOrderLength() const virtual unsigned long
        +setEC(const ByteString& inEc) virtual void
        +setA(const ByteString& inA) virtual void
        +getEC() const virtual const ByteString&
        +getA() const virtual const ByteString&
        +deserialise(ByteString& serialised) virtual bool
        #ec ByteString
        #a ByteString
    }
    PublicKey <|-- EDPublicKey

    class OSSLEDPrivateKey {
        +OSSLEDPrivateKey()
        +OSSLEDPrivateKey(const EVP_PKEY* inPKEY)
        +setFromOSSL(const EVP_PKEY* inPKEY) virtual void
        +getOSSLKey() EVP_PKEY*
        -nid int
        -pkey EVP_PKEY*
        -createOSSLKey() void
    }
    EDPrivateKey <|-- OSSLEDPrivateKey

    class OSSLEDPublicKey {
        +OSSLEDPublicKey()
        +OSSLEDPublicKey(const EVP_PKEY* inPKEY)
        +setFromOSSL(const EVP_PKEY* inPKEY) virtual void
        +getOSSLKey() EVP_PKEY*
        -nid int
        -pkey EVP_PKEY*
        -createOSSLKey() void
    }
    EDPublicKey <|-- OSSLEDPublicKey


    class AsymmetricKeyPair {
        <<abstract>>
        +getPublicKey() virtual PublicKey*
        +getConstPublicKey() const virtual const PublicKey*
        +getPrivateKey() virtual PrivateKey*
        +getConstPrivateKey() const virtual const PrivateKey*
        +serialise() const virtual ByteString
    }
    Serialisable <|-- AsymmetricKeyPair

    class OSSLEDKeyPair {
        +setPublicKey(OSSLEDPublicKey& publicKey) void
        +setPrivateKey(OSSLEDPrivateKey& privateKey) void
        -pubKey OSSLEDPublicKey
        -privKey OSSLEDPrivateKey
    }

    AsymmetricKeyPair <|-- OSSLEDKeyPair
    OSSLEDKeyPair o-- OSSLEDPublicKey: contains
    OSSLEDKeyPair o-- OSSLEDPrivateKey: contains

    class AsymmetricParameters {
        <<abstract>>
        +areOfType(const char* type)
    }

    class ECParameters {
        +type: const char*
        +setEC(const ByteString& inEC) void
        +getEC() const const ByteString&
        +serialise() const virtual ByteString
        +deserialise(ByteString& serialised) virtual bool
        -ec ByteString
    }
    AsymmetricParameters <|-- ECParameters

    class AsymAlgo {
        <<enumeration>>
        Unknown
        RSA
        DSA
        DH
        ECDH
        ECDSA
        GOST
        EDDSA
        SLHDSA
    }

    class AsymMech {
        <<enumeration>>
        Unknown
        RSA
        RSA_MD5_PKCS
        RSA_PKCS
        RSA_PKCS_OAEP
        RSA_SHA1_PKCS
        RSA_SHA224_PKCS
        RSA_SHA256_PKCS
        RSA_SHA384_PKCS
        RSA_SHA512_PKCS
        RSA_PKCS_PSS
        RSA_SHA1_PKCS_PSS
        RSA_SHA224_PKCS_PSS
        RSA_SHA256_PKCS_PSS
        RSA_SHA384_PKCS_PSS
        RSA_SHA512_PKCS_PSS
        RSA_SSL
        DSA
        DSA_SHA1
        DSA_SHA224
        DSA_SHA256
        DSA_SHA384
        DSA_SHA512
        ECDSA
        GOST
        GOST_GOST
        EDDSA
        SLHDSA
    }
    %% Update/Final was removed from this class
    class AsymmetricAlgorithm {
        <<abstract>>
        +sign(PrivateKey* privateKey, const ByteString& dataToSign, ByteString& signature, const AsymMech::Type mechanism, const void* param = NULL, const size_t paramLen = 0) virtual bool
        +signInit(PrivateKey* privateKey, const AsymMech::Type mechanism, const void* param = NULL, const size_t paramLen = 0) virtual bool
        +verify(PublicKey* publicKey, const ByteString& originalData, const ByteString& signature, const AsymMech::Type mechanism, const void* param = NULL, const size_t paramLen = 0) virtual bool
        +verifyInit(PublicKey* publicKey, const AsymMech::Type mechanism, const void* param = NULL, const size_t paramLen = 0) virtual bool
        +generateKeyPair(AsymmetricKeyPair** ppKeyPair, AsymmetricParameters* parameters, RNG* rng = NULL) virtual bool
        +getMinKeySize() virtual unsigned long
        +getMaxKeySize() virtual unsigned long
        +generateParameters(AsymmetricParameters** ppParams, void* parameters = NULL, RNG* rng = NULL) virtual bool
        +reconstructKeyPair(AsymmetricKeyPair** ppKeyPair, ByteString& serialisedData) virtual bool
        +reconstructPublicKey(PublicKey** ppPublicKey, ByteString& serialisedData) virtual bool
        +reconstructPrivateKey(PrivateKey** ppPrivateKey, ByteString& serialisedData) virtual bool
        +reconstructParameters(AsymmetricParameters** ppParams, ByteString& serialisedData) virtual bool
        +newPublicKey() virtual PublicKey*
        +newPrivateKey() virtual PrivateKey*
        +newParameters() virtual AsymmetricParameters*
        #currentPublicKey PublicKey*
        #currentPrivateKey PrivateKey*
        #currentMechanism AsymMech::Type
        #currentPadding AsymMech::Type
        -currentOperation int
    }

    class OSSLEDDSA {
    }

    AsymmetricAlgorithm <|-- OSSLEDDSA

    class SoftHSM {
        +i() static SoftHSM*
        +reset() static void
        +~SoftHSM() virtual
        +C_Initialize(CK_VOID_PTR pInitArgs) CK_RV
        +C_Finalize(CK_VOID_PTR pReserved) CK_RV
        +C_GetInfo(CK_INFO_PTR pInfo) CK_RV
        +C_GetSlotList(CK_BBOOL tokenPresent, CK_SLOT_ID_PTR pSlotList, CK_ULONG_PTR pulCount) CK_RV
        +C_GetSlotInfo(CK_SLOT_ID slotID, CK_SLOT_INFO_PTR pInfo) CK_RV
        +C_GetTokenInfo(CK_SLOT_ID slotID, CK_TOKEN_INFO_PTR pInfo) CK_RV
        +C_GetMechanismList(CK_SLOT_ID slotID, CK_MECHANISM_TYPE_PTR pMechanismList, CK_ULONG_PTR pulCount) CK_RV
        +C_GetMechanismInfo(CK_SLOT_ID slotID, CK_MECHANISM_TYPE type, CK_MECHANISM_INFO_PTR pInfo) CK_RV
        +C_InitToken(CK_SLOT_ID slotID, CK_UTF8CHAR_PTR pPin, CK_ULONG ulPinLen, CK_UTF8CHAR_PTR pLabel) CK_RV
        +C_OpenSession(CK_SLOT_ID slotID, CK_FLAGS flags, CK_VOID_PTR pApplication, CK_NOTIFY notify, CK_SESSION_HANDLE_PTR phSession) CK_RV
        +C_CloseSession(CK_SESSION_HANDLE hSession) CK_RV
        +C_CloseAllSessions(CK_SLOT_ID slotID) CK_RV
        +C_GetSessionInfo(CK_SESSION_HANDLE hSession, CK_SESSION_INFO_PTR pInfo) CK_RV
        +C_SignInit(CK_SESSION_HANDLE hSession, CK_MECHANISM_PTR pMechanism, CK_OBJECT_HANDLE hKey) CK_RV
        +C_Sign(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pData, CK_ULONG ulDataLen, CK_BYTE_PTR pSignature, CK_ULONG_PTR pulSignatureLen) CK_RV
        +C_SignUpdate(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pPart, CK_ULONG ulPartLen) CK_RV
        +C_SignFinal(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pSignature, CK_ULONG_PTR pulSignatureLen) CK_RV
        +C_SignRecoverInit(CK_SESSION_HANDLE hSession, CK_MECHANISM_PTR pMechanism, CK_OBJECT_HANDLE hKey) CK_RV
        +C_SignRecover(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pData, CK_ULONG ulDataLen, CK_BYTE_PTR pSignature, CK_ULONG_PTR pulSignatureLen) CK_RV
        +C_VerifyInit(CK_SESSION_HANDLE hSession, CK_MECHANISM_PTR pMechanism, CK_OBJECT_HANDLE hKey) CK_RV
        +C_Verify(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pData, CK_ULONG ulDataLen, CK_BYTE_PTR pSignature, CK_ULONG ulSignatureLen) CK_RV
        +C_VerifyUpdate(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pPart, CK_ULONG ulPartLen) CK_RV
        +C_VerifyFinal(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pSignature, CK_ULONG ulSignatureLen) CK_RV
        +C_VerifyRecoverInit(CK_SESSION_HANDLE hSession, CK_MECHANISM_PTR pMechanism, CK_OBJECT_HANDLE hKey) CK_RV
        +C_VerifyRecover(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pSignature, CK_ULONG ulSignatureLen, CK_BYTE_PTR pData, CK_ULONG_PTR pulDataLen) CK_RV
        +C_GenerateKeyPair(CK_SESSION_HANDLE hSession, CK_MECHANISM_PTR pMechanism, CK_ATTRIBUTE_PTR pPublicKeyTemplate, CK_ULONG ulPublicKeyAttributeCount, CK_ATTRIBUTE_PTR pPrivateKeyTemplate, CK_ULONG ulPrivateKeyAttributeCount, CK_OBJECT_HANDLE_PTR phPublicKey, CK_OBJECT_HANDLE_PTR phPrivateKey) CK_RV
        +C_GetFunctionStatus(CK_SESSION_HANDLE hSession) CK_RV
        +C_CancelFunction(CK_SESSION_HANDLE hSession) CK_RV
        +C_WaitForSlotEvent(CK_FLAGS flags, CK_SLOT_ID_PTR pSlot, CK_VOID_PTR pReserved) CK_RV
        -SoftHSM()
        -instance SoftHSM*
        -isInitialised bool
        -isRemovable bool
        -sessionObjectStore SessionObjectStore*
        -objectStore ObjectStore*
        -slotManager SlotManager*
        -sessionManager SessionManager*
        -handleManager HandleManager*
        -mechanisms_table std::map<std::string, CK_MECHANISM_TYPE>
        -supportedMechanisms std::list<CK_MECHANISM_TYPE>
        -nrSupportedMechanisms CK_ULONG
        -forkID int
        -AsymSignInit(CK_SESSION_HANDLE hSession, CK_MECHANISM_PTR pMechanism, CK_OBJECT_HANDLE hKey) CK_RV
        -AsymVerifyInit(CK_SESSION_HANDLE hSession, CK_MECHANISM_PTR pMechanism, CK_OBJECT_HANDLE hKey) CK_RV
        -generateED(...) CK_RV
        -generateSLH(...) CK_RV
        -CreateObject(...) CK_RV
        -getEDPrivateKey(...) CK_RV
        -getEDPublicKey(...) CK_RV
        -getSLHPrivateKey(...) CK_RV
        -getSLHPublicKey(...) CK_RV
        -setEDPrivateKey(...) bool
        -isMechanismPermitted(OSObject* key, CK_MECHANISM_PTR pMechanism) bool
        -prepareSupportedMechanisms(std::map<std::string, CK_MECHANISM_TYPE>& t) void
        -detectFork() bool
    }
