Comandos do git mais avançados e breve explicação deles.

git fetch --prune origin
  -> clean local branches

git add -p file.c
  -> A opção -p significa patch, é usado para adicionar só uma parte do file.c.

git show HEAD~1:redes/projeto/server.c
  -> Mostra todo o arquivo do commit anterior.

git log --all --decorate --oneline --graph
  -> Mostra a árvore dos commits.

git reflog 
  -> Mostra hashes de comits e histórico de ações realizadas no
repositório. Se vc está usando este comando é porque provávelmente fez
cagada. Geralmente este comando vem depois de um reset...

git rebase -i main
 -> Vc quer pegar os commits da main para a sua branch atual, ex: feature.
Ele é próximo ao git merge, mas mantém os commits alinhados e a branch 
'limpa'. Quando não fazer rebase ? Não faça em branchs públicas, como
master, deploy, devel. Só faça em branches particulares.

git reset --softt --mixed --hard <ID_COMMIT>
  -> Desfaz as alteracoes ate o <ID_COMMIT>

  -> --soft : Joga tudo na staging area.
  -> --mixed (default) : Joga tudo no working directory
  -> --hard : Joga tudo fora.

git diff --chached
  -> Mostra a diferença do que está na staging area para HEAD~1, sem a
flag ele faz o diff com o que está no working directory.

git diff check_sum_antigo check_sum_novo main.c
  -> Mostra o diff de um arquivo específico.

git restore VS git restore --staged
  -> Este comando vem depois que vc deu um git add em algo errado.
git reset file.c: Unstages the changes in the file and keeps them in the working directory.
git restore --staged file.c: Unstages the changes in the file and discards them from the working directory.

git cherry-pick
  -> Copia um commit e 'cola' ele na branch atual.

git branch -D <NOME_BRANCH>
  -> Deleta branch

git branch -b <NOME_BRANCH> <ID_BRANCH_REVERTIDA>
  -> Restaura a branch, ID_BRANCH_REVERTIDA e pego com reflog.

git revert <ID_COMMIT>
  -> cria um novo commit, sem as adicoes do ID_COMMIT.

git bisect
  -> Encontra o ponto de insercao do bug no codigo.
  start -> comeca o comando.
  bad -> diz que tem o bug no commit.

  # Encontre um commit em que o codigo estava bom.
  git checkout <ID_COMMIT_BOM>

  good -> diz que nao tem bug no commit.

  # O git te guiara ate o commit com erro.

Principal material de referência.
  https://www.atlassian.com/git/tutorials/setting-up-a-repository
